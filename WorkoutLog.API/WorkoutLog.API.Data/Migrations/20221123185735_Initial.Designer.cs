// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkoutLog.API.Data;

#nullable disable

namespace WorkoutLog.API.Data.Migrations
{
    [DbContext(typeof(WorkoutLogDBContext))]
    [Migration("20221123185735_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("WorkoutLog.API.Data.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EquipmentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExerciseTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Instructions")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PrimaryMusclesWorkedId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId")
                        .IsUnique();

                    b.HasIndex("ExerciseTypeId")
                        .IsUnique();

                    b.HasIndex("PrimaryMusclesWorkedId")
                        .IsUnique();

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.ExerciseOtherMusclesWorked", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OtherMusclesWorkedId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExerciseId", "OtherMusclesWorkedId");

                    b.HasIndex("OtherMusclesWorkedId");

                    b.ToTable("ExerciseOtherMusclesWorked");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.ExerciseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ExerciseType");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentValue")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GoalType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GoalValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Goal");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.Muscle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MuscleGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MuscleGroupId");

                    b.ToTable("Muscle");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.MuscleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MuscleGroup");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.OptimalVolume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MuscleGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Volume")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MuscleGroupId")
                        .IsUnique();

                    b.ToTable("OptimalVolume");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.Preference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BodyMeasurementUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultTimerDuration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DistanceUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LogRPE")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaximumTimerDuration")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowExerciseInformation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowExerciseSummary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WeightUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Preference");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bodyweight")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TrainingStyles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.UserWorkout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("WorkoutId");

                    b.ToTable("UserWorkout");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateNextScheduled")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavourited")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalVolume")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Workout");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.WorkoutExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId")
                        .IsUnique();

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutExercise");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.WorkoutExerciseSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RateOfPerceivedExertionRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reps")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RepsInReserveRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkoutExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkoutExerciseSetType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutExerciseId");

                    b.ToTable("WorkoutExerciseSet");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.WorkoutRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkoutExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutExerciseId")
                        .IsUnique();

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutRecord");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.Exercise", b =>
                {
                    b.HasOne("WorkoutLog.API.Data.Models.Equipment", "Equipment")
                        .WithOne("Exercise")
                        .HasForeignKey("WorkoutLog.API.Data.Models.Exercise", "EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutLog.API.Data.Models.ExerciseType", "ExerciseType")
                        .WithOne("Exercise")
                        .HasForeignKey("WorkoutLog.API.Data.Models.Exercise", "ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutLog.API.Data.Models.MuscleGroup", "PrimaryMusclesWorked")
                        .WithOne("Exercise")
                        .HasForeignKey("WorkoutLog.API.Data.Models.Exercise", "PrimaryMusclesWorkedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("ExerciseType");

                    b.Navigation("PrimaryMusclesWorked");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.ExerciseOtherMusclesWorked", b =>
                {
                    b.HasOne("WorkoutLog.API.Data.Models.Exercise", "Exercise")
                        .WithMany("OtherMusclesWorked")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutLog.API.Data.Models.MuscleGroup", "OtherMusclesWorked")
                        .WithMany("Exercises")
                        .HasForeignKey("OtherMusclesWorkedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("OtherMusclesWorked");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.Goal", b =>
                {
                    b.HasOne("WorkoutLog.API.Data.Models.Exercise", "Exercise")
                        .WithOne("Goal")
                        .HasForeignKey("WorkoutLog.API.Data.Models.Goal", "ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutLog.API.Data.Models.User", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.Muscle", b =>
                {
                    b.HasOne("WorkoutLog.API.Data.Models.MuscleGroup", "MuscleGroup")
                        .WithMany("Muscles")
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MuscleGroup");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.OptimalVolume", b =>
                {
                    b.HasOne("WorkoutLog.API.Data.Models.MuscleGroup", "MuscleGroup")
                        .WithOne("OptimalVolume")
                        .HasForeignKey("WorkoutLog.API.Data.Models.OptimalVolume", "MuscleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MuscleGroup");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.Preference", b =>
                {
                    b.HasOne("WorkoutLog.API.Data.Models.User", "User")
                        .WithOne("Preference")
                        .HasForeignKey("WorkoutLog.API.Data.Models.Preference", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.UserWorkout", b =>
                {
                    b.HasOne("WorkoutLog.API.Data.Models.User", "User")
                        .WithOne("UserWorkoutId")
                        .HasForeignKey("WorkoutLog.API.Data.Models.UserWorkout", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutLog.API.Data.Models.Workout", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.Workout", b =>
                {
                    b.HasOne("WorkoutLog.API.Data.Models.User", "User")
                        .WithMany("Workouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.WorkoutExercise", b =>
                {
                    b.HasOne("WorkoutLog.API.Data.Models.Exercise", "Exercise")
                        .WithOne("WorkoutExercise")
                        .HasForeignKey("WorkoutLog.API.Data.Models.WorkoutExercise", "ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutLog.API.Data.Models.Workout", "Workout")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.WorkoutExerciseSet", b =>
                {
                    b.HasOne("WorkoutLog.API.Data.Models.WorkoutExercise", "WorkoutExercise")
                        .WithMany("WorkoutExerciseSets")
                        .HasForeignKey("WorkoutExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutExercise");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.WorkoutRecord", b =>
                {
                    b.HasOne("WorkoutLog.API.Data.Models.WorkoutExercise", "WorkoutExercise")
                        .WithOne("WorkoutRecord")
                        .HasForeignKey("WorkoutLog.API.Data.Models.WorkoutRecord", "WorkoutExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutLog.API.Data.Models.Workout", "Workout")
                        .WithMany("WorkoutRecords")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workout");

                    b.Navigation("WorkoutExercise");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.Equipment", b =>
                {
                    b.Navigation("Exercise")
                        .IsRequired();
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.Exercise", b =>
                {
                    b.Navigation("Goal")
                        .IsRequired();

                    b.Navigation("OtherMusclesWorked");

                    b.Navigation("WorkoutExercise")
                        .IsRequired();
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.ExerciseType", b =>
                {
                    b.Navigation("Exercise")
                        .IsRequired();
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.MuscleGroup", b =>
                {
                    b.Navigation("Exercise")
                        .IsRequired();

                    b.Navigation("Exercises");

                    b.Navigation("Muscles");

                    b.Navigation("OptimalVolume")
                        .IsRequired();
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.User", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("Preference")
                        .IsRequired();

                    b.Navigation("UserWorkoutId")
                        .IsRequired();

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.Workout", b =>
                {
                    b.Navigation("WorkoutExercises");

                    b.Navigation("WorkoutRecords");
                });

            modelBuilder.Entity("WorkoutLog.API.Data.Models.WorkoutExercise", b =>
                {
                    b.Navigation("WorkoutExerciseSets");

                    b.Navigation("WorkoutRecord")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
